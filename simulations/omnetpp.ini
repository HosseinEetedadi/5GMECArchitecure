[General]
#image-path=../../../images
output-scalar-file-append = false
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.vec
seed-set = ${repetition}
num-rngs = 3
**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP
**.vector-recording = false


*.playgroundSizeX = 1100m
*.playgroundSizeY = 800m
*.playgroundSizeZ = 50m


############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.ueTxPower = 26
**.eNodeBTxPower = 46
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 40   # reports CQI every 40ms

############### IPv4 configurator config #################
#*.configurator.config = xmldoc("./demo.xml")
**.configurator.assignAddresses = true
**.configurator.addDefaultRoutes = true
**.configurator.addStaticRoutes = true

#------------------------------------#
# Config MultiMec
#
# General configuration for the for a multicell, multi-MEC system
# In this scenario, the MEC orchestrator instantiates three MEC apps on 
# MEC Host 1 (because it has more CPU resources that MEC host 2. However,
# the MEC apps use the Location Service available on MEC Host 2 only.
#
[Config MultiMec]
sim-time-limit=35s
network = multimechost.singleMecHost


############### CA configuration ################# 
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=0}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=50}

*.gnb1.cellularNic.numCarriers = 1
*.gnb1.cellularNic.channelModel[0].componentCarrierIndex = 0
*.ue[*].cellularNic.numCarriers = 1
*.ue[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0


############## UE configuration ##################
*.numUe = ${numUEs=3}

# UEs associates to the best BS at the beginning of the simulation
*.ue[*].macCellId = 0
*.ue[*].masterId = 0
*.ue[*].nrMacCellId = 1
*.ue[*].nrMasterId = 1
**.dynamicCellAssociation = true
**.enableHandover = true

#222.79599,125.70599
############ UEs position #################
##########################################################
#                      Mobility                          #			
##########################################################		
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

*.ue[*].mobility.initFromDisplayString = false
*.ue[*].mobility.typename = "LinearMobility"
*.ue[*].mobility.updateInterval = 0.05s

*.gNodeB1.mobility.initFromDisplayString = true

**.numUes = 3
**.ue[0].mobility.initialX = 180m
**.ue[0].mobility.initialY = 50m
**.ue[0].mobility.initialMovementHeading = 90deg
**.ue[0].mobility.speed = 1mps

**.ue[1].mobility.initialX = 180m
**.ue[1].mobility.initialY = 100m
**.ue[1].mobility.initialMovementHeading = 90deg
**.ue[1].mobility.speed = 3mps

**.ue[2].mobility.initialX = 180m
**.ue[2].mobility.initialY = 150m
**.ue[2].mobility.initialMovementHeading = 90deg
**.ue[2].mobility.speed = 2mps

**.ue[3].mobility.initialX = 180m
**.ue[3].mobility.initialY = 200m
**.ue[3].mobility.initialMovementHeading = 90deg
**.ue[3].mobility.speed = 1mps


**.mobility.verbose = true

############# Client App configuration ################
	
*.ue[0].numApps = 2
*.ue[0].app[0].typename = "DeviceApp"
*.ue[0].app[0].localPort = 4500
*.ue[0].app[0].UALCMPAddress = "ualcmp"
*.ue[0].app[0].UALCMPPort = 1000
*.ue[0].app[0].appPackageSource = "ApplicationDescriptors/WarningAlertApp.json"

*.ue[0].app[1].typename = "UEWarningAlertApp"
*.ue[0].app[1].deviceAppAddress = "ue["+string(ancestorIndex(1))+"]"
*.ue[0].app[1].deviceAppPort = 4500
*.ue[0].app[1].startTime = 1s										
*.ue[0].app[1].stopTime = 35s


*.ue[1].numApps = 2
*.ue[1].app[0].typename = "DeviceApp"
*.ue[1].app[0].localPort = 4500
*.ue[1].app[0].UALCMPAddress = "ualcmp"
*.ue[1].app[0].UALCMPPort = 1000
*.ue[1].app[0].appPackageSource = "ApplicationDescriptors/WarningAlertApp.json"

*.ue[1].app[1].typename = "UEWarningAlertApp"
*.ue[1].app[1].deviceAppAddress = "ue["+string(ancestorIndex(1))+"]"
*.ue[1].app[1].deviceAppPort = 4500
*.ue[1].app[1].startTime = 1s										
*.ue[1].app[1].stopTime = 35s		


*.ue[2].numApps = 2
*.ue[2].app[0].typename = "DeviceApp"
*.ue[2].app[0].localPort = 4500
*.ue[2].app[0].UALCMPAddress = "ualcmp"
*.ue[2].app[0].UALCMPPort = 1000
*.ue[2].app[0].appPackageSource = "ApplicationDescriptors/WarningAlertApp.json"

*.ue[2].app[1].typename = "UEWarningAlertApp"
*.ue[2].app[1].deviceAppAddress = "ue["+string(ancestorIndex(1))+"]"
*.ue[2].app[1].deviceAppPort = 4500
*.ue[2].app[1].startTime = 1s										
*.ue[2].app[1].stopTime = 35s		

#------------------------------------#

############ MEC Configuration ############
**.hasRNISupport = true

# tcp settings
**.tcp.typename = "Tcp"
**.tcp.advertisedWindow = 65535         # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.tcpAlgorithmClass = "TcpReno"    # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp
**.tcp.sackSupport = true               # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)

# MEC Hosts
**.mecHost*.virtualisationInfrastructure.ipv4.forwarding = true

*.mecHost1.maxMECApps = 100					# max ME Apps to instantiate
*.mecHost1.maxRam = 150MB					# max KBytes of Ram 
*.mecHost1.maxDisk = 1000MB					# max KBytes of Disk Space 
*.mecHost1.maxCpuSpeed = 900		    	# max CPU


# MEC Hosts
*.mecHost2.maxMECApps = 100					# max ME Apps to instantiate
*.mecHost2.maxRam = 40MB					# max KBytes of Ram 
*.mecHost2.maxDisk = 1000MB					# max KBytes of Disk Space 
*.mecHost2.maxCpuSpeed = 160    	    	# max CPU

# Core Server 1 Resources
*.coreServer1.maxMECApps = 200
*.coreServer1.maxRam = 50GB
*.coreServer1.maxDisk = 500TB
*.coreServer1.maxCpuSpeed = 4000

# Core Server 2 Resources
*.coreServer2.maxMECApps = 300
*.coreServer2.maxRam = 100GB
*.coreServer2.maxDisk = 1000000GB
*.coreServer2.maxCpuSpeed = 4600

*.mecHost*.bsList = "gnb1"

*.upf.typename = "UPF"
*.upf.forwarding = true  # Enable routing
*.upf.qosEnabled = true  # Apply QoS rules
*.upf.highLatencyThreshold = 50ms  # If latency > 50ms, send task to Core
*.upf.routeTable = xmldoc("routes.xml")

# MEC Services
# MEC host 1 services configurations
*.mecHost1.mecPlatform.numMecServices = 1
*.mecHost1.mecPlatform.mecService[0].typename = "LocationService"
*.mecHost1.mecPlatform.mecService[0].localAddress = "mecHost1.virtualisationInfrastructure" 
*.mecHost1.mecPlatform.mecService[0].localPort = 10020
*.mecHost1.mecPlatform.serviceRegistry.localAddress = "mecHost1.virtualisationInfrastructure" 
*.mecHost1.mecPlatform.serviceRegistry.localPort = 10021

# MEC host 2 services configurations
*.mecHost2.mecPlatform.numMecServices = 1
*.mecHost2.mecPlatform.mecService[0].typename = "LocationService"
*.mecHost2.mecPlatform.mecService[0].localAddress = "mecHost2.virtualisationInfrastructure" 
*.mecHost2.mecPlatform.mecService[0].localPort = 10022
*.mecHost2.mecPlatform.serviceRegistry.localAddress = "mecHost2.virtualisationInfrastructure" 
*.mecHost2.mecPlatform.serviceRegistry.localPort = 10023

# random number generators configuration
*.mecHost1.mecPlatform.serviceRegistry.rng-0 = 0 # request service time
*.mecHost1.mecPlatform.serviceRegistry.rng-1 = 1 # subscription service time
*.mecHost1.mecPlatform.mecService[0].rng-0 = 0 # request service time
*.mecHost1.mecPlatform.mecService[0].rng-1 = 1 # subscription service time
*.mecHost1.mecPlatform.mecService[0].requestServiceTime = 20us
*.mecHost1.mecPlatform.mecService[0].subscriptionServiceTime = 11us


*.mecHost2.mecPlatform.serviceRegistry.rng-0 = 0 # request service time
*.mecHost2.mecPlatform.serviceRegistry.rng-1 = 1 # subscription service time
*.mecHost2.mecPlatform.mecService[0].rng-0 = 0 # request service time
*.mecHost2.mecPlatform.mecService[0].rng-1 = 1 # subscription service time
*.mecHost2.mecPlatform.mecService[0].requestServiceTime = 20us
*.mecHost2.mecPlatform.mecService[0].subscriptionServiceTime = 11us

#*.coreServer1.app[*].typename = "VoDUDPServer"
#*.coreServer1.app[*].destAddresses = "ue[" + string(ancestorIndex(0)) + "]"
#*.coreServer1.app[*].destPort = 4501 
#*.coreServer1.app[*].localPort = 3088+ancestorIndex(0) 
##*.server.app[*].startTime = uniform(0s,0.02s)
#*.coreServer1.app[*].vod_trace_file = "./sample_video_trace.gdf"



#*.configurator.config = xmldoc("routes.xml")

# MEC Orchestrator configuration
*.mecOrchestrator.mecHostList = "mecHost1, mecHost2, coreServer1, coreServer2"
*.mecOrchestrator.mecApplicationPackageList = "WarningAlertApp"   # List of MEC app descriptors to be onboarded at 
*.mecHost*.mecPlatformManager.mecOrchestrator = "mecOrchestrator" # the MECPM needs to know the MEC orchestrator
*.coreServer*.mecPlatformManager.mecOrchestrator = "mecOrchestrator" # the MECPM needs to know the MEC orchestrator
*.mecOrchestrator.loadBalancingAlgorithm = "random"

